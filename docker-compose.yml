version: '3'
#bunch of containers
services: 
  postgres: # name of service as it has been added to our docker container now
    image: 'postgres:latest' # specify image from docker hub
    environment:
      - POSTGRES_PASSWORD=postgres_password # sets variable at runtime.
  # name redis server
  redis:
  # image redis
    image: 'redis:latest'
  nginx:
    depends_on:
      - api
      - client
    restart: always # no matter what we want nginx working
    build:
      dockerfile: Dockerfile.dev
      context: ./nginx
    ports:
      - '3050:80' # 3050 local port mapped to 80 in container
  api:
    build:
      dockerfile: Dockerfile.dev # jsut the name of the dockerfile
      context: ./server # context sets where it needs to look in - current working directory and find a folder called server.
    volumes: # everything is in /app based on the Dockerfile
      # - /app/node_modules # inside the container dont try to override the folder. Ensures you dont have to rebuild image when you make changes to source code.
      - ./server:/app # look at the server dir. and copy everything inside there in the app folder of the container. Except the node_modules
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - PGUSER=postgres
      - PGHOST=postgres
      - PGDATABASE=postgres
      - PGPASSWORD=postgres_password
      - PGPORT=5432
      #you can refer to the service name, instead of ip
  client:
    stdin_open: true
    build:
      dockerfile: Dockerfile.dev
      context: ./client
    volumes:
      # - /app/node_modules
      - ./client:/app
  worker:
    build:
      dockerfile: Dockerfile.dev
      context: ./worker
    volumes:
      # - /app/node_modules
      - ./worker:/app
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379


      # api and worker expect running version of redis. 
      # it might take a while for it to start so first time docker-compose runs
      # it might break
language: node_js
node_js:
  - 16.10.0
sudo: required # any time we have to make use of docker we need to have super permissions
services: # we need tocker preinstalled. it will auto install a copy of docker
  - docker

before_install: # commands executed before commans are run
  - docker build -t maknovicell/react-test -f ./client/Dockerfile.dev ./client # use client directory when doing stuff. anyitme we run the docker build -> we get the image id. so we tag it with local docker username and name of repo

script: # all commands that need to execute to run test suite. each return other than exit 0 -> treat as fail.
  - docker run -e CI=true maknovicell/react-test npm test # npm run test waits for input so it just hangs. thats why we add -e. npm run test overrides the default command.

after_success:
  - docker build -t maknovicell/multi-client ./client # default dockerfile name is used so we dont specify it
  - docker build -t maknovicell/multi-nginx ./nginx
  - docker build -t maknovicell/multi-server ./server
  - docker build -t maknovicell/multi-worker ./worker
  
  # Login to docker CLI
  - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_ID" --password-stdin # we tell it to expect the password on the standrad in channel
  
  # We now need to push them to docker hub. so we need to login the docker cli
  - docker push maknovicell/multi-client
  - docker push maknovicell/multi-nginx
  - docker push maknovicell/multi-server
  - docker push maknovicell/multi-worker

deploy:
  provider: elasticbeanstalk
  region: 'eu-west-1'
  app: 'multi-docker'
  env: 'MultiDocker-env'
  bucket_name: 'elasticbeanstalk-eu-west-1-638922103874'
  bucket_path: 'docker-multi'
  on:
    branch: master
  access_key_id: $AWS_ACCESS_KEY
  secret_access_key: $AWS_SECRET_KEY